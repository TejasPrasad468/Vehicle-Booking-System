=========================================
üöñ Vehicle Booking System ‚Äì Project Plan
=========================================

# üèó Project Architecture & Flow

## Frontend (React/Next.js with Tailwind)

### Admin Flow ‚Äì Add Vehicle
1. Click "Add Vehicle" (Visible only if user role = Admin).
2. Fill Vehicle Form:
   - Vehicle Number
   - Vehicle Capacity (Kg)
   - Driver Name
   - Driver Contact Number
3. Submit ‚Üí POST /api/vehicles ‚Üí show success message.

### User Flow ‚Äì Check Vehicle Availability
1. User logs in ‚Üí navigates to "Check Availability".
2. Search Form:
   - Required Capacity
   - From Pincode
   - To Pincode
   - Start Time (datetime picker)
3. Submit ‚Üí GET /api/vehicles/available?capacity=..&from=..&to=..&startTime=..
4. Show list of Available Vehicles.

### User Flow ‚Äì Book Vehicle
1. User clicks ‚ÄúBook This Vehicle‚Äù on an available one.
2. Auto-fill details (capacity, startTime, endTime, route).
3. User adds:
   - Customer Name
   - Customer Phone Number
4. Submit ‚Üí POST /api/bookings
5. Confirmation message ‚Üí Booking stored.


## Backend (Node.js + Express + MongoDB)

### Vehicle Fleet (Admin)
- POST /api/vehicles ‚Üí Add vehicle
- GET /api/vehicles ‚Üí List all vehicles (for admin)

### Availability Check (User)
- GET /api/vehicles/available
- Logic:
    estimatedRideDurationHours = Math.abs(parseInt(toPincode) - parseInt(fromPincode)) % 24
    endTime = startTime + estimatedRideDurationHours

    Filtering conditions:
    1. vehicle.capacityKg >= requiredCapacity
    2. vehicle.route matches from‚Üíto
    3. vehicle is not already booked at overlapping time

### Booking (User)
- POST /api/bookings ‚Üí Creates new booking
- GET /api/bookings/:userId ‚Üí Fetch user‚Äôs bookings

Schema Example (MongoDB):
Booking: {
    vehicleId,
    userId,
    customerName,
    customerPhone,
    capacity,
    startTime,
    endTime,
    fromPincode,
    toPincode,
    status: "Booked" | "Cancelled" | "Completed"
}


## Testing (Backend ‚Äì Jest / Mocha + Supertest)

### Unit Tests
1. Vehicle Creation (Admin) ‚Üí should insert in DB.
2. Availability API ‚Üí should filter vehicles correctly.
3. Booking API ‚Üí should create booking with proper values.

Example test:
describe("Vehicle Availability", () => {
  it("should return available vehicles for given capacity and time", async () => {
    const res = await request(app)
      .get("/api/vehicles/available")
      .query({ capacity: 200, from: "110001", to: "110002", startTime: "2025-10-02T10:00" });

    expect(res.status).toBe(200);
    expect(res.body.length).toBeGreaterThan(0);
  });
});


# üïê 5-Hour Execution Plan

- Hour 1: Setup backend (Express, MongoDB models: User, Vehicle, Booking).
- Hour 2: Implement vehicle APIs (POST /vehicles, GET /vehicles).
- Hour 3: Implement availability logic + endpoint.
- Hour 4: Implement booking flow + save booking.
- Hour 5: Frontend forms (Add vehicle, Check availability, Book),
          write 2‚Äì3 unit tests, push code + README.

=========================================
